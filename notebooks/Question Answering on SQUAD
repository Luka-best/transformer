{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Question Answering on SQUAD","provenance":[{"file_id":"https://github.com/huggingface/notebooks/blob/master/examples/question_answering.ipynb","timestamp":1628358125580}]},"accelerator":"GPU","language_info":{"name":"python"},"kernelspec":{"name":"python3","display_name":"Python 3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"dd9884e1250748fe8ffe2e5a6f2c3efb":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_c30f2b9d694f45d299e6b93fe57d3048","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_d33282ebece84104877204fb800f15bf","IPY_MODEL_2bb6526c64a24d34991053131d4a3ceb","IPY_MODEL_770c63597b1341b288432fbf16fa2e0d"]}},"c30f2b9d694f45d299e6b93fe57d3048":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d33282ebece84104877204fb800f15bf":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_5993908ae6924fcba08ddc9f2db4a5fb","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Downloading: ","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_70a7a268303b4cb0915e6f9fc4296017"}},"2bb6526c64a24d34991053131d4a3ceb":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_f47887e65ff843eeb95cf78c7439aae9","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1869,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1869,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d538f86c7c564d6f8de09ddc14c7b6ba"}},"770c63597b1341b288432fbf16fa2e0d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_96033eb52930497cbf85c4376f7aecc5","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 5.28k/? [00:00&lt;00:00, 119kB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_11be94593d8f4561ad94b392fe0a616b"}},"5993908ae6924fcba08ddc9f2db4a5fb":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"70a7a268303b4cb0915e6f9fc4296017":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f47887e65ff843eeb95cf78c7439aae9":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"d538f86c7c564d6f8de09ddc14c7b6ba":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"96033eb52930497cbf85c4376f7aecc5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"11be94593d8f4561ad94b392fe0a616b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"18ab140af0354db1acc4fab06ba06f26":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_aee8a6c094b94f64b97e94ef562233c5","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_e7857940bdc443329c9324ef8ae4fdd8","IPY_MODEL_a13caaf597e34baca94e471fdcad43d2","IPY_MODEL_6b34a53b06664231ad4e9a76fb2305d4"]}},"aee8a6c094b94f64b97e94ef562233c5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e7857940bdc443329c9324ef8ae4fdd8":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_44375da7d0724df58e06666cd2b4614b","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Downloading: ","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_67e5e761ca08446494d5a7d9b4be2a0d"}},"a13caaf597e34baca94e471fdcad43d2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_0d6ae195070c4fc9a6c0d2c42a7839a9","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":1024,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1024,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_369bd2b6a40b4d63a5e2b1a468c637fc"}},"6b34a53b06664231ad4e9a76fb2305d4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_2f408caeb0ba49e69ba3498999ce70ce","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 2.40k/? [00:00&lt;00:00, 69.2kB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_2ffee4a7f49f4e9fb863c89d01707765"}},"44375da7d0724df58e06666cd2b4614b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"67e5e761ca08446494d5a7d9b4be2a0d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0d6ae195070c4fc9a6c0d2c42a7839a9":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"369bd2b6a40b4d63a5e2b1a468c637fc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2f408caeb0ba49e69ba3498999ce70ce":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"2ffee4a7f49f4e9fb863c89d01707765":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e5527ad61f124ffbab619a7c696b54db":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_23b223fe98694d6998d615a9804300e2","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_c4da53eda8d640d18c3391ca6546ec7f","IPY_MODEL_cc500f74ef7e4f8f803099edbea41922","IPY_MODEL_928c58c090e649428e9f10f0eee8d4ab"]}},"23b223fe98694d6998d615a9804300e2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c4da53eda8d640d18c3391ca6546ec7f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_dc49e07c53d94db6a3418f7efa180130","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Downloading: ","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_fe053ab0c50e4ada8fef8a89a6572e32"}},"cc500f74ef7e4f8f803099edbea41922":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_89101fe9045c47ec8635fe95e34d97de","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":9551051,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":9551051,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_58f01fc0035a4fa8a32c066959e56f4d"}},"928c58c090e649428e9f10f0eee8d4ab":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_9a949f65d3c742adba4060620c2501eb","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 42.1M/? [00:00&lt;00:00, 73.1MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3e83b9cce13949b28ce05a9e0cbc330e"}},"dc49e07c53d94db6a3418f7efa180130":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"fe053ab0c50e4ada8fef8a89a6572e32":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"89101fe9045c47ec8635fe95e34d97de":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"58f01fc0035a4fa8a32c066959e56f4d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9a949f65d3c742adba4060620c2501eb":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"3e83b9cce13949b28ce05a9e0cbc330e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3be20b79e5ca4616bb0910a93c687a67":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_64220db1e1864e93ac6baaffd4e6d13f","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_b3cc10fdb1a84e9f9af9a9ed301f213f","IPY_MODEL_270f691070db4bb2b7d2b66260655778","IPY_MODEL_ec69ca9823114fd4bf6de8b17da21d8a"]}},"64220db1e1864e93ac6baaffd4e6d13f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"b3cc10fdb1a84e9f9af9a9ed301f213f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_16715587825d4b9aa1b085fba65c2927","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Downloading: ","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_bb21fa5bbc1742e5b245814eb448716d"}},"270f691070db4bb2b7d2b66260655778":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_f849c83224d642ea813a332ffb2e671a","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":800683,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":800683,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_843c240c12344fa2883bf724706d522c"}},"ec69ca9823114fd4bf6de8b17da21d8a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_0ab5a4ec9c544b979be13fda9eb1f831","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 4.37M/? [00:00&lt;00:00, 38.8MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d31480cefa934fca816d2a67f5641b5c"}},"16715587825d4b9aa1b085fba65c2927":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"bb21fa5bbc1742e5b245814eb448716d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f849c83224d642ea813a332ffb2e671a":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"843c240c12344fa2883bf724706d522c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"0ab5a4ec9c544b979be13fda9eb1f831":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"d31480cefa934fca816d2a67f5641b5c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2a3ae72c447f4405a4f7b8347a2c05d9":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_e7ff72fb0cb04c9fa5b529065cbbee8a","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_a8753519d27f4bee80f661686d8e7b24","IPY_MODEL_05d77ca30933451e98822b871fdd4422","IPY_MODEL_edd181a55e314fb5bdd7b689fb963e5e"]}},"e7ff72fb0cb04c9fa5b529065cbbee8a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"a8753519d27f4bee80f661686d8e7b24":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_43502afe231849dc8b05e9ea003454f2","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1a0cdcb65f5b4c00a41c1ed1df3703a2"}},"05d77ca30933451e98822b871fdd4422":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_f9a3d1eaa05f4574aed272402b1a4663","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_06081e5504c5460493593336c7017602"}},"edd181a55e314fb5bdd7b689fb963e5e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_810add0a0e6244f19d68fbe76f240d00","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 128715/0 [00:09&lt;00:00, 16546.59 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_72dfaf0293e8482bb5ee1cda714c4a72"}},"43502afe231849dc8b05e9ea003454f2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"1a0cdcb65f5b4c00a41c1ed1df3703a2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f9a3d1eaa05f4574aed272402b1a4663":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"06081e5504c5460493593336c7017602":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":"20px","min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"810add0a0e6244f19d68fbe76f240d00":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"72dfaf0293e8482bb5ee1cda714c4a72":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"85e95fa152ad46a19ad2dd8fdb9f5ee8":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_5df2a65bd382426cafdb46f9275d3c96","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_9ed79fb66ae44fc6860459298f699a7f","IPY_MODEL_10e9cb2643a548a79ce87ae1de8bc879","IPY_MODEL_4c8f9f03d6694eb1975786dbbd75acd8"]}},"5df2a65bd382426cafdb46f9275d3c96":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"9ed79fb66ae44fc6860459298f699a7f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_a783ea23bb724dbf8c7ecb34efec0238","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_ffb0ecd23a0c43d687c5ed6c9ced7db5"}},"10e9cb2643a548a79ce87ae1de8bc879":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_ac88d16026814ac9be63abda1c4fe0c3","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"info","max":1,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":1,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_19a81f7d0c284fdaa0d9d026e84d65c2"}},"4c8f9f03d6694eb1975786dbbd75acd8":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_18d1e9120c0e4719bf82b0d6fb43a847","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 10654/0 [00:00&lt;00:00, 13329.12 examples/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_83079da6f7cc4a3bb01f8ac1f6c0c108"}},"a783ea23bb724dbf8c7ecb34efec0238":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"ffb0ecd23a0c43d687c5ed6c9ced7db5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ac88d16026814ac9be63abda1c4fe0c3":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"19a81f7d0c284fdaa0d9d026e84d65c2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":"20px","min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"18d1e9120c0e4719bf82b0d6fb43a847":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"83079da6f7cc4a3bb01f8ac1f6c0c108":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"b99fb45f92ba46fca4875f667d9c4be8":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_166bc59774ab42b4931d2d7f7eb5eea1","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_e0fb65e1832746be8ebacc031836abf0","IPY_MODEL_365df2cedebb4fe4b25b0e2c4d5bb51a","IPY_MODEL_ef6b73af788b450ea3179e3e82532cac"]}},"166bc59774ab42b4931d2d7f7eb5eea1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"e0fb65e1832746be8ebacc031836abf0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_27e2992571524568a5f45dafa3c121ba","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Downloading: 100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_66872480c56b405f8335fdb721b13589"}},"365df2cedebb4fe4b25b0e2c4d5bb51a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_f33de4345b7c4c4495239bb71e167337","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":28,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":28,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_e98f19c819c341d4b99dfd58dae026ac"}},"ef6b73af788b450ea3179e3e82532cac":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_bf85097328ff4115bfb7147328a6af95","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 28.0/28.0 [00:00&lt;00:00, 701B/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_2f1c3d11427841a9a59c4c4699167ebd"}},"27e2992571524568a5f45dafa3c121ba":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"66872480c56b405f8335fdb721b13589":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f33de4345b7c4c4495239bb71e167337":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"e98f19c819c341d4b99dfd58dae026ac":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"bf85097328ff4115bfb7147328a6af95":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"2f1c3d11427841a9a59c4c4699167ebd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3817f5526bc248c0aa517156b95f32d3":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_afa9abbdaba14f569602d6981bcf2bae","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_190ec57b08384404820509a6576044dc","IPY_MODEL_ceec2951f2d04b2782d2eccbfe1caaf0","IPY_MODEL_0426043618f94629b9bb41b836b8ba64"]}},"afa9abbdaba14f569602d6981bcf2bae":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"190ec57b08384404820509a6576044dc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_6a79b12d82d64eb6ba3bbc2abd3e5f50","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Downloading: 100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_5f5d5c0fbdf940998c415fd9edb7d6fe"}},"ceec2951f2d04b2782d2eccbfe1caaf0":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_539caf5fe64b4947bd564f6d71811663","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":442,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":442,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1f73522e9c714dd6847e144e6d16dea5"}},"0426043618f94629b9bb41b836b8ba64":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_c8c58181f1f742e59ba897429110f499","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 442/442 [00:00&lt;00:00, 11.0kB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f1cce139445a4140a006a948faa058d5"}},"6a79b12d82d64eb6ba3bbc2abd3e5f50":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"5f5d5c0fbdf940998c415fd9edb7d6fe":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"539caf5fe64b4947bd564f6d71811663":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"1f73522e9c714dd6847e144e6d16dea5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c8c58181f1f742e59ba897429110f499":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"f1cce139445a4140a006a948faa058d5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"beeacbc09c934b909b27b3b82473799f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_7d269ce7e4d1403783a5af4dabb1d71e","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_24ab713b7f0b445cb0994d9f96c268a8","IPY_MODEL_2929412a68064d77be35a086d786fe12","IPY_MODEL_6e91c35d4cdc416087f0849cbbe97bb1"]}},"7d269ce7e4d1403783a5af4dabb1d71e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"24ab713b7f0b445cb0994d9f96c268a8":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_ffe2d3b62e104674a3f6392f8b8d20c7","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Downloading: 100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_0e8b25bc83da4641b1b9d432f304254f"}},"2929412a68064d77be35a086d786fe12":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_45bea492fc1741ca94202254298da920","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":231508,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":231508,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_19084032c58d436b992729b409cf3cb2"}},"6e91c35d4cdc416087f0849cbbe97bb1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_5dcc7013f2d44596830cc814a9f83d90","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 232k/232k [00:00&lt;00:00, 1.44MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_e1255f271ef84e21a6b2db6600eba098"}},"ffe2d3b62e104674a3f6392f8b8d20c7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"0e8b25bc83da4641b1b9d432f304254f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"45bea492fc1741ca94202254298da920":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"19084032c58d436b992729b409cf3cb2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5dcc7013f2d44596830cc814a9f83d90":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"e1255f271ef84e21a6b2db6600eba098":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c188d65170484831acc76e299c36490d":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_3e9a2214ee78487abb2c7c387a4bb6ab","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_5a51be8ff06948f8b9baddc91747d0c3","IPY_MODEL_097e3f1b5ea04dd3ae22f65a6b94cf02","IPY_MODEL_42a6fa950d0a487c9af4675406e93b48"]}},"3e9a2214ee78487abb2c7c387a4bb6ab":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"5a51be8ff06948f8b9baddc91747d0c3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_3534f3a3266244d6a0aa3b5925caa997","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Downloading: 100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_fcb0d19838634c9baa1b1784bea59eb3"}},"097e3f1b5ea04dd3ae22f65a6b94cf02":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_48176dfeda434c3fbe4cb6da14c378a9","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":466062,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":466062,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_20cf5ed6d50144a8a1423bfeb6a28fec"}},"42a6fa950d0a487c9af4675406e93b48":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_d089b7ae33904c48ba205c088ef586ce","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 466k/466k [00:00&lt;00:00, 1.73MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_01a4ff6aa6eb48a18ea30e41cf4c0fe2"}},"3534f3a3266244d6a0aa3b5925caa997":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"fcb0d19838634c9baa1b1784bea59eb3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"48176dfeda434c3fbe4cb6da14c378a9":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"20cf5ed6d50144a8a1423bfeb6a28fec":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"d089b7ae33904c48ba205c088ef586ce":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"01a4ff6aa6eb48a18ea30e41cf4c0fe2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"8f007a3716694215b5c6e242fe6449ea":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_b57aa81efc18468081c18d7fa57c3f32","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_91c06235b38b4c719cba2faf41d8089c","IPY_MODEL_244932ca041545fea2c833d6388e481e","IPY_MODEL_bee69f1e021140ea88cee379c815148e"]}},"b57aa81efc18468081c18d7fa57c3f32":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"91c06235b38b4c719cba2faf41d8089c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_c8bf07daf8dd4b0198d4c4e8ad80d5f8","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_c5c89fbd5f11457085bc9209479c71ef"}},"244932ca041545fea2c833d6388e481e":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_fa599ab7407f451188abfbd011ba5096","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":131,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":131,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_37c045b64e8f4ce69bcec2d9222850a7"}},"bee69f1e021140ea88cee379c815148e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_c40e85675fdc4fb386c3a7defd590875","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 131/131 [01:19&lt;00:00,  1.94ba/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_1ece4015cd244982b854da21092ca4fd"}},"c8bf07daf8dd4b0198d4c4e8ad80d5f8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"c5c89fbd5f11457085bc9209479c71ef":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"fa599ab7407f451188abfbd011ba5096":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"37c045b64e8f4ce69bcec2d9222850a7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c40e85675fdc4fb386c3a7defd590875":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"1ece4015cd244982b854da21092ca4fd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"4503a52a8a3c46daa32e2f25ff7e6270":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_f831b76a25c24f7d92b30dfb235e316a","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_ec74427c375841b28f25fefd9d630dd4","IPY_MODEL_5d9e55de89ff46e7b9223ea68182d569","IPY_MODEL_bea52b5c1b84499993ce5b418e3a088a"]}},"f831b76a25c24f7d92b30dfb235e316a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ec74427c375841b28f25fefd9d630dd4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_11c82e8def5848079cef1610bed26016","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d29de6e5944e432794002bb03fbb8a10"}},"5d9e55de89ff46e7b9223ea68182d569":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_59fbeb92a39044888307cda118839d8a","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":12,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":12,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d15b40a0cd7c4f8898dc3d717f4488be"}},"bea52b5c1b84499993ce5b418e3a088a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_efb41b5d107b43858d50956bb13cd38b","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 12/12 [00:07&lt;00:00,  1.70ba/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_4bcdfeb6bb6446688eed5bf93931abee"}},"11c82e8def5848079cef1610bed26016":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"d29de6e5944e432794002bb03fbb8a10":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"59fbeb92a39044888307cda118839d8a":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"d15b40a0cd7c4f8898dc3d717f4488be":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"efb41b5d107b43858d50956bb13cd38b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"4bcdfeb6bb6446688eed5bf93931abee":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"37abd14957fd48d38a432061108d8551":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_fa2d5d047fbe4a3496809ff5dc458c46","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_b95da9b49cef432fa046dfd48c768420","IPY_MODEL_bd4bb16f8f7e47638840abc47ca11b94","IPY_MODEL_dd198fc02d954bb29863fff8608fb99a"]}},"fa2d5d047fbe4a3496809ff5dc458c46":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"b95da9b49cef432fa046dfd48c768420":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_f30e99b70fcd4568ae75702d74e86fdc","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Downloading: 100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_07763cf7871b469c9326bbb0e215b068"}},"bd4bb16f8f7e47638840abc47ca11b94":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_721ebe00ade34dc39de5968e537ce61d","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":267967963,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":267967963,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_0b6c66ff688d4007a1bdd91b3a1352dd"}},"dd198fc02d954bb29863fff8608fb99a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_8c057aaf38284463a9314507312be97a","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 268M/268M [00:06&lt;00:00, 44.8MB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_3e8beb006f4b4111a84a58ef25645b1f"}},"f30e99b70fcd4568ae75702d74e86fdc":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"07763cf7871b469c9326bbb0e215b068":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"721ebe00ade34dc39de5968e537ce61d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"0b6c66ff688d4007a1bdd91b3a1352dd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"8c057aaf38284463a9314507312be97a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"3e8beb006f4b4111a84a58ef25645b1f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"X4cRE8IbIrIV"},"source":["If you're opening this Notebook on colab, you will probably need to install 🤗 Transformers and 🤗 Datasets. Uncomment the following cell and run it."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MOsHUjgdIrIW","executionInfo":{"status":"ok","timestamp":1628351429774,"user_tz":240,"elapsed":8916,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"469826c5-e24f-4241-90e5-2e66cb4e882f"},"source":["#! pip install datasets transformers"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Collecting datasets\n","  Downloading datasets-1.11.0-py3-none-any.whl (264 kB)\n","\u001b[K     |████████████████████████████████| 264 kB 8.4 MB/s \n","\u001b[?25hCollecting transformers\n","  Downloading transformers-4.9.1-py3-none-any.whl (2.6 MB)\n","\u001b[K     |████████████████████████████████| 2.6 MB 50.2 MB/s \n","\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from datasets) (21.0)\n","Collecting huggingface-hub<0.1.0\n","  Downloading huggingface_hub-0.0.15-py3-none-any.whl (43 kB)\n","\u001b[K     |████████████████████████████████| 43 kB 2.2 MB/s \n","\u001b[?25hRequirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from datasets) (1.1.5)\n","Requirement already satisfied: pyarrow!=4.0.0,>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (3.0.0)\n","Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (2.23.0)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from datasets) (1.19.5)\n","Requirement already satisfied: dill in /usr/local/lib/python3.7/dist-packages (from datasets) (0.3.4)\n","Collecting fsspec>=2021.05.0\n","  Downloading fsspec-2021.7.0-py3-none-any.whl (118 kB)\n","\u001b[K     |████████████████████████████████| 118 kB 67.2 MB/s \n","\u001b[?25hCollecting xxhash\n","  Downloading xxhash-2.0.2-cp37-cp37m-manylinux2010_x86_64.whl (243 kB)\n","\u001b[K     |████████████████████████████████| 243 kB 51.2 MB/s \n","\u001b[?25hRequirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from datasets) (4.6.1)\n","Requirement already satisfied: multiprocess in /usr/local/lib/python3.7/dist-packages (from datasets) (0.70.12.2)\n","Collecting tqdm>=4.42\n","  Downloading tqdm-4.62.0-py2.py3-none-any.whl (76 kB)\n","\u001b[K     |████████████████████████████████| 76 kB 4.8 MB/s \n","\u001b[?25hRequirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<0.1.0->datasets) (3.7.4.3)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<0.1.0->datasets) (3.0.12)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->datasets) (2.4.7)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (2021.5.30)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (3.0.4)\n","Collecting pyyaml>=5.1\n","  Downloading PyYAML-5.4.1-cp37-cp37m-manylinux1_x86_64.whl (636 kB)\n","\u001b[K     |████████████████████████████████| 636 kB 61.2 MB/s \n","\u001b[?25hRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2019.12.20)\n","Collecting sacremoses\n","  Downloading sacremoses-0.0.45-py3-none-any.whl (895 kB)\n","\u001b[K     |████████████████████████████████| 895 kB 57.0 MB/s \n","\u001b[?25hCollecting tokenizers<0.11,>=0.10.1\n","  Downloading tokenizers-0.10.3-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (3.3 MB)\n","\u001b[K     |████████████████████████████████| 3.3 MB 30.1 MB/s \n","\u001b[?25hCollecting huggingface-hub<0.1.0\n","  Downloading huggingface_hub-0.0.12-py3-none-any.whl (37 kB)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->datasets) (3.5.0)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas->datasets) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->datasets) (2.8.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->datasets) (1.15.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.0.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (7.1.2)\n","Installing collected packages: tqdm, xxhash, tokenizers, sacremoses, pyyaml, huggingface-hub, fsspec, transformers, datasets\n","  Attempting uninstall: tqdm\n","    Found existing installation: tqdm 4.41.1\n","    Uninstalling tqdm-4.41.1:\n","      Successfully uninstalled tqdm-4.41.1\n","  Attempting uninstall: pyyaml\n","    Found existing installation: PyYAML 3.13\n","    Uninstalling PyYAML-3.13:\n","      Successfully uninstalled PyYAML-3.13\n","Successfully installed datasets-1.11.0 fsspec-2021.7.0 huggingface-hub-0.0.12 pyyaml-5.4.1 sacremoses-0.0.45 tokenizers-0.10.3 tqdm-4.62.0 transformers-4.9.1 xxhash-2.0.2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"aa0oUhofTRjm"},"source":["If you're opening this notebook locally, make sure your environment has an install from the last version of those libraries.\n","\n","To be able to share your model with the community and generate results like the one shown in the picture below via the inference API, there are a few more steps to follow.\n","\n","First you have to store your authentication token from the Hugging Face website (sign up [here](https://huggingface.co/join) if you haven't already!) then uncomment the following cell and input your username and password (this only works on Colab, in a regular notebook, you need to do this in a terminal):"]},{"cell_type":"code","metadata":{"id":"4aymLP8OTRjn"},"source":["# !huggingface-cli login"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ebQCRj2PTRjo"},"source":["Then you need to install Git-LFS and setup Git if you haven't already. Uncomment the following instructions and adapt with your name and email:"]},{"cell_type":"code","metadata":{"id":"qnngJPn1TRjp"},"source":["# !pip install hf-lfs\n","# !git config --global user.email \"you@example.com\"\n","# !git config --global user.name \"Your Name\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h3NBMYGlTRjq"},"source":["Make sure your version of Transformers is at least 4.8.1 since the functionality was introduced in that version:"]},{"cell_type":"code","metadata":{"id":"TZCG-GFfTRjr","executionInfo":{"status":"ok","timestamp":1628351514040,"user_tz":240,"elapsed":4213,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"5aeb9bc4-c3bc-4643-c026-ae2ef58616f3","colab":{"base_uri":"https://localhost:8080/"}},"source":["import transformers\n","\n","print(transformers.__version__)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["4.9.1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HFASsisvIrIb"},"source":["You can find a script version of this notebook to fine-tune your model in a distributed fashion using multiple GPUs or TPUs [here](https://github.com/huggingface/transformers/tree/master/examples/question-answering)."]},{"cell_type":"markdown","metadata":{"id":"rEJBSTyZIrIb"},"source":["# Fine-tuning a model on a question-answering task"]},{"cell_type":"markdown","metadata":{"id":"pMmLgl-0TRjt"},"source":["In this notebook, we will see how to fine-tune one of the [🤗 Transformers](https://github.com/huggingface/transformers) model to a question answering task, which is the task of extracting the answer to a question from a given context. We will see how to easily load a dataset for these kinds of tasks and use the `Trainer` API to fine-tune a model on it.\n","\n","![Widget inference representing the QA task](https://github.com/huggingface/notebooks/blob/master/examples/images/question_answering.png?raw=1)\n","\n","**Note:** This notebook finetunes models that answer question by taking a substring of a context, not by generating new text."]},{"cell_type":"markdown","metadata":{"id":"4RRkXuteIrIh"},"source":["This notebook is built to run on any question answering task with the same format as SQUAD (version 1 or 2), with any model checkpoint from the [Model Hub](https://huggingface.co/models) as long as that model has a version with a token classification head and a fast tokenizer (check on [this table](https://huggingface.co/transformers/index.html#bigtable) if this is the case). It might just need some small adjustments if you decide to use a different dataset than the one used here. Depending on you model and the GPU you are using, you might need to adjust the batch size to avoid out-of-memory errors. Set those three parameters, then the rest of the notebook should run smoothly:"]},{"cell_type":"code","metadata":{"id":"zVvslsfMIrIh","executionInfo":{"status":"ok","timestamp":1628351587982,"user_tz":240,"elapsed":235,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["# This flag is the difference between SQUAD v1 or 2 (if you're using another dataset, it indicates if impossible\n","# answers are allowed or not).\n","squad_v2 = True\n","model_checkpoint = \"distilbert-base-uncased\"\n","batch_size = 16"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"whPRbBNbIrIl"},"source":["## Loading the dataset"]},{"cell_type":"markdown","metadata":{"id":"W7QYTpxXIrIl"},"source":["We will use the [🤗 Datasets](https://github.com/huggingface/datasets) library to download the data and get the metric we need to use for evaluation (to compare our model to the benchmark). This can be easily done with the functions `load_dataset` and `load_metric`.  "]},{"cell_type":"code","metadata":{"id":"IreSlFmlIrIm","executionInfo":{"status":"ok","timestamp":1628351603336,"user_tz":240,"elapsed":1032,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["from datasets import load_dataset, load_metric"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CKx2zKs5IrIq"},"source":["For our example here, we'll use the [SQUAD dataset](https://rajpurkar.github.io/SQuAD-explorer/). The notebook should work with any question answering dataset provided by the 🤗 Datasets library. If you're using your own dataset defined from a JSON or csv file (see the [Datasets documentation](https://huggingface.co/docs/datasets/loading_datasets.html#from-local-files) on how to load them), it might need some adjustments in the names of the columns used."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":199,"referenced_widgets":["dd9884e1250748fe8ffe2e5a6f2c3efb","c30f2b9d694f45d299e6b93fe57d3048","d33282ebece84104877204fb800f15bf","2bb6526c64a24d34991053131d4a3ceb","770c63597b1341b288432fbf16fa2e0d","5993908ae6924fcba08ddc9f2db4a5fb","70a7a268303b4cb0915e6f9fc4296017","f47887e65ff843eeb95cf78c7439aae9","d538f86c7c564d6f8de09ddc14c7b6ba","96033eb52930497cbf85c4376f7aecc5","11be94593d8f4561ad94b392fe0a616b","18ab140af0354db1acc4fab06ba06f26","aee8a6c094b94f64b97e94ef562233c5","e7857940bdc443329c9324ef8ae4fdd8","a13caaf597e34baca94e471fdcad43d2","6b34a53b06664231ad4e9a76fb2305d4","44375da7d0724df58e06666cd2b4614b","67e5e761ca08446494d5a7d9b4be2a0d","0d6ae195070c4fc9a6c0d2c42a7839a9","369bd2b6a40b4d63a5e2b1a468c637fc","2f408caeb0ba49e69ba3498999ce70ce","2ffee4a7f49f4e9fb863c89d01707765","e5527ad61f124ffbab619a7c696b54db","23b223fe98694d6998d615a9804300e2","c4da53eda8d640d18c3391ca6546ec7f","cc500f74ef7e4f8f803099edbea41922","928c58c090e649428e9f10f0eee8d4ab","dc49e07c53d94db6a3418f7efa180130","fe053ab0c50e4ada8fef8a89a6572e32","89101fe9045c47ec8635fe95e34d97de","58f01fc0035a4fa8a32c066959e56f4d","9a949f65d3c742adba4060620c2501eb","3e83b9cce13949b28ce05a9e0cbc330e","3be20b79e5ca4616bb0910a93c687a67","64220db1e1864e93ac6baaffd4e6d13f","b3cc10fdb1a84e9f9af9a9ed301f213f","270f691070db4bb2b7d2b66260655778","ec69ca9823114fd4bf6de8b17da21d8a","16715587825d4b9aa1b085fba65c2927","bb21fa5bbc1742e5b245814eb448716d","f849c83224d642ea813a332ffb2e671a","843c240c12344fa2883bf724706d522c","0ab5a4ec9c544b979be13fda9eb1f831","d31480cefa934fca816d2a67f5641b5c","2a3ae72c447f4405a4f7b8347a2c05d9","e7ff72fb0cb04c9fa5b529065cbbee8a","a8753519d27f4bee80f661686d8e7b24","05d77ca30933451e98822b871fdd4422","edd181a55e314fb5bdd7b689fb963e5e","43502afe231849dc8b05e9ea003454f2","1a0cdcb65f5b4c00a41c1ed1df3703a2","f9a3d1eaa05f4574aed272402b1a4663","06081e5504c5460493593336c7017602","810add0a0e6244f19d68fbe76f240d00","72dfaf0293e8482bb5ee1cda714c4a72","85e95fa152ad46a19ad2dd8fdb9f5ee8","5df2a65bd382426cafdb46f9275d3c96","9ed79fb66ae44fc6860459298f699a7f","10e9cb2643a548a79ce87ae1de8bc879","4c8f9f03d6694eb1975786dbbd75acd8","a783ea23bb724dbf8c7ecb34efec0238","ffb0ecd23a0c43d687c5ed6c9ced7db5","ac88d16026814ac9be63abda1c4fe0c3","19a81f7d0c284fdaa0d9d026e84d65c2","18d1e9120c0e4719bf82b0d6fb43a847","83079da6f7cc4a3bb01f8ac1f6c0c108"]},"id":"s_AY1ATSIrIq","executionInfo":{"status":"ok","timestamp":1628351630989,"user_tz":240,"elapsed":14424,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"f3c7636a-ef83-4e9a-e11c-6b506e914581"},"source":["datasets = load_dataset(\"squad_v2\" if squad_v2 else \"squad\")"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"dd9884e1250748fe8ffe2e5a6f2c3efb","version_minor":0,"version_major":2},"text/plain":["Downloading:   0%|          | 0.00/1.87k [00:00<?, ?B/s]"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"18ab140af0354db1acc4fab06ba06f26","version_minor":0,"version_major":2},"text/plain":["Downloading:   0%|          | 0.00/1.02k [00:00<?, ?B/s]"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Downloading and preparing dataset squad_v2/squad_v2 (download: 44.34 MiB, generated: 122.41 MiB, post-processed: Unknown size, total: 166.75 MiB) to /root/.cache/huggingface/datasets/squad_v2/squad_v2/2.0.0/09187c73c1b837c95d9a249cd97c2c3f1cebada06efe667b4427714b27639b1d...\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e5527ad61f124ffbab619a7c696b54db","version_minor":0,"version_major":2},"text/plain":["Downloading:   0%|          | 0.00/9.55M [00:00<?, ?B/s]"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"3be20b79e5ca4616bb0910a93c687a67","version_minor":0,"version_major":2},"text/plain":["Downloading:   0%|          | 0.00/801k [00:00<?, ?B/s]"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"2a3ae72c447f4405a4f7b8347a2c05d9","version_minor":0,"version_major":2},"text/plain":["0 examples [00:00, ? examples/s]"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"85e95fa152ad46a19ad2dd8fdb9f5ee8","version_minor":0,"version_major":2},"text/plain":["0 examples [00:00, ? examples/s]"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Dataset squad_v2 downloaded and prepared to /root/.cache/huggingface/datasets/squad_v2/squad_v2/2.0.0/09187c73c1b837c95d9a249cd97c2c3f1cebada06efe667b4427714b27639b1d. Subsequent calls will reuse this data.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RzfPtOMoIrIu"},"source":["The `datasets` object itself is [`DatasetDict`](https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasetdict), which contains one key for the training, validation and test set."]},{"cell_type":"code","metadata":{"id":"GWiVUF0jIrIv","executionInfo":{"status":"ok","timestamp":1628351649830,"user_tz":240,"elapsed":247,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"6ac4080d-1af8-46eb-ccc2-5077ee9753e7","colab":{"base_uri":"https://localhost:8080/"}},"source":["datasets"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DatasetDict({\n","    train: Dataset({\n","        features: ['id', 'title', 'context', 'question', 'answers'],\n","        num_rows: 130319\n","    })\n","    validation: Dataset({\n","        features: ['id', 'title', 'context', 'question', 'answers'],\n","        num_rows: 11873\n","    })\n","})"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"Ew1arPxxTRjy"},"source":["We can see the training, validation and test sets all have a column for the context, the question and the answers to those questions."]},{"cell_type":"markdown","metadata":{"id":"u3EtYfeHIrIz"},"source":["To access an actual element, you need to select a split first, then give an index:"]},{"cell_type":"code","metadata":{"id":"X6HrpprwIrIz","executionInfo":{"status":"ok","timestamp":1628351668672,"user_tz":240,"elapsed":237,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"fe504272-cc96-45db-86c7-48852ecf9182","colab":{"base_uri":"https://localhost:8080/"}},"source":["datasets[\"train\"][0]"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'answers': {'answer_start': [269], 'text': ['in the late 1990s']},\n"," 'context': 'Beyoncé Giselle Knowles-Carter (/biːˈjɒnseɪ/ bee-YON-say) (born September 4, 1981) is an American singer, songwriter, record producer and actress. Born and raised in Houston, Texas, she performed in various singing and dancing competitions as a child, and rose to fame in the late 1990s as lead singer of R&B girl-group Destiny\\'s Child. Managed by her father, Mathew Knowles, the group became one of the world\\'s best-selling girl groups of all time. Their hiatus saw the release of Beyoncé\\'s debut album, Dangerously in Love (2003), which established her as a solo artist worldwide, earned five Grammy Awards and featured the Billboard Hot 100 number-one singles \"Crazy in Love\" and \"Baby Boy\".',\n"," 'id': '56be85543aeaaa14008c9063',\n"," 'question': 'When did Beyonce start becoming popular?',\n"," 'title': 'Beyoncé'}"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"Ej1cFZaxTRjz"},"source":["We can see the answers are indicated by their start position in the text (here at character 515) and their full text, which is a substring of the context as we mentioned above."]},{"cell_type":"markdown","metadata":{"id":"WHUmphG3IrI3"},"source":["To get a sense of what the data looks like, the following function will show some examples picked randomly in the dataset (automatically decoding the labels in passing)."]},{"cell_type":"code","metadata":{"id":"i3j8APAoIrI3","executionInfo":{"status":"ok","timestamp":1628351710542,"user_tz":240,"elapsed":137,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["from datasets import ClassLabel, Sequence\n","import random\n","import pandas as pd\n","from IPython.display import display, HTML\n","\n","def show_random_elements(dataset, num_examples=10):\n","    assert num_examples <= len(dataset), \"Can't pick more elements than there are in the dataset.\"\n","    picks = []\n","    for _ in range(num_examples):\n","        pick = random.randint(0, len(dataset)-1)\n","        while pick in picks:\n","            pick = random.randint(0, len(dataset)-1)\n","        picks.append(pick)\n","    \n","    df = pd.DataFrame(dataset[picks])\n","    for column, typ in dataset.features.items():\n","        if isinstance(typ, ClassLabel):\n","            df[column] = df[column].transform(lambda i: typ.names[i])\n","        elif isinstance(typ, Sequence) and isinstance(typ.feature, ClassLabel):\n","            df[column] = df[column].transform(lambda x: [typ.feature.names[i] for i in x])\n","    display(HTML(df.to_html()))"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"SZy5tRB_IrI7","scrolled":true,"executionInfo":{"status":"ok","timestamp":1628351728902,"user_tz":240,"elapsed":212,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"801efad5-3dfe-4ba8-86b6-906b1da18962","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["show_random_elements(datasets[\"train\"])"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/html":["<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>title</th>\n","      <th>context</th>\n","      <th>question</th>\n","      <th>answers</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5acead8732bba1001ae4b002</td>\n","      <td>Avicenna</td>\n","      <td>The soviet film \"Youth of Genius\" (1982), filmed and studios Uzbekfilm and Tajikfilm, dedicated to children and youth years Avicenna. The film's director Elyor Ishmuhamedov. Romantic and stormy, performed works, danger and irresistible thirst of knowledge was the youth of Al-Husayn ibn Abdallah ibn al-Hasan ibn Ali ibn Sina, which will be known around the world under the name of Avicenna – a great physician, scientist and educator X-XI centuries. The film is set in the ancient city of Bukhara at the turn of the millennium. In Louis L'Amour's 1985 historical novel The Walking Drum, Kerbouchard studies and discusses Avicenna's The Canon of Medicine. In his book The Physician (1988) Noah Gordon tells the story of a young English medical apprentice who disguises himself as a Jew to travel from England to Persia and learn from Avicenna, the great master of his time. The novel was adapted into a feature film, The Physician, in 2013. Avicenna was played by Ben Kingsley.</td>\n","      <td>What movie was made in 1928?</td>\n","      <td>{'text': [], 'answer_start': []}</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>56e145b6e3433e1400422d2c</td>\n","      <td>Boston</td>\n","      <td>According to a 2014 study by the Pew Research Center, 57% of the population of the city identified themselves as Christians, with 25% professing attendance at a variety of churches that could be considered Protestant, and 29% professing Roman Catholic beliefs. while 33% claim no religious affiliation. The same study says that other religions (including Judaism, Buddhism, Islam, and Hinduism) collectively make up about 10% of the population.</td>\n","      <td>In 2014, other religions mad eup what percentage of the citys population?</td>\n","      <td>{'text': ['10%'], 'answer_start': [422]}</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>56f865baaef237190062603f</td>\n","      <td>Southampton</td>\n","      <td>The town experienced major expansion during the Victorian era. The Southampton Docks company had been formed in 1835. In October 1838 the foundation stone of the docks was laid and the first dock opened in 1842. The structural and economic development of docks continued for the next few decades. The railway link to London was fully opened in May 1840. Southampton subsequently became known as The Gateway to the Empire.</td>\n","      <td>In what historical period did Southampton expand greatly?</td>\n","      <td>{'text': ['Victorian era'], 'answer_start': [48]}</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>57267cbe708984140094c7c2</td>\n","      <td>Mexico_City</td>\n","      <td>In response to the demands, in 1987 the Federal District received a greater degree of autonomy, with the elaboration the first Statute of Government (Estatuto de Gobierno), and the creation of an Assembly of Representatives.[citation needed] In the 1990s, this autonomy was further expanded and, starting from 1997, residents can directly elect the head of government of the Federal District and the representatives of a unicameral Legislative Assembly (which succeeded the previous Assembly) by popular vote.</td>\n","      <td>When did citizens receive the right to elect the head of the Federal District?</td>\n","      <td>{'text': ['1997'], 'answer_start': [310]}</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5726d4015951b619008f7f37</td>\n","      <td>Pope_Paul_VI</td>\n","      <td>Of his eight encyclicals, Pope Paul VI is best known for his encyclical Humanae vitae (Of Human Life, subtitled On the Regulation of Birth), published on 25 July 1968. In this encyclical he reaffirmed the Catholic Church's traditional view of marriage and marital relations and a continued condemnation of artificial birth control. There were two Papal committees and numerous independent experts looking into the latest advancement of science and medicine on the question of artificial birth control. which were noted by the Pope in his encyclical The expressed views of Paul VI reflected the teachings of his predecessors, especially Pius XI, Pius XII and John XXIII and never changed, as he repeatedly stated them in the first few years of his Pontificate</td>\n","      <td>Which one of Paul Vi's encyclicals best known in Catholic history?</td>\n","      <td>{'text': ['Humanae vitae'], 'answer_start': [72]}</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>572661f6f1498d1400e8ddc1</td>\n","      <td>Madonna_(entertainer)</td>\n","      <td>Madonna Louise Ciccone (/tʃɪˈkoʊni/; Italian: [tʃikˈkoːne]; born August 16, 1958) is an American singer, songwriter, actress, and businesswoman. She achieved popularity by pushing the boundaries of lyrical content in mainstream popular music and imagery in her music videos, which became a fixture on MTV. Madonna is known for reinventing both her music and image, and for maintaining her autonomy within the recording industry. Music critics have acclaimed her musical productions, which have generated some controversy. Often referred to as the \"Queen of Pop\", she is often cited as an influence by other artists.</td>\n","      <td>When was Madonna born?</td>\n","      <td>{'text': ['August 16, 1958'], 'answer_start': [65]}</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>5733759bd058e614000b5b57</td>\n","      <td>Saint_Barth%C3%A9lemy</td>\n","      <td>As the terrain is generally arid, the hills have mostly poor soil and support only cacti and succulent plants. During the rainy season the area turns green with vegetation and grass. The eastern part of the island is greener as it receives more rainfall. A 1994 survey has revealed several hundred indigenous species of plants including the naturalized varieties of flora; some growing in irrigated areas while the dry areas are dominated by the cacti variety. Sea grapes and palm trees are a common sight with mangroves and shrubs surviving in the saline coastal swamps. Coconut palm was brought to the island from the Pacific islands. Important plants noted on the island are:</td>\n","      <td>Which half of the island is usually greener due to more rainfall?</td>\n","      <td>{'text': ['The eastern part'], 'answer_start': [183]}</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>56ccf53362d2951400fa64ff</td>\n","      <td>Sino-Tibetan_relations_during_the_Ming_dynasty</td>\n","      <td>Nevertheless, the ethno-geographic caste hierarchy favoring the Mongols and other ethnicities were accorded higher status than the Han Chinese majority. Although Han Chinese who were recruited as advisers were often actually more influential than high officials, their status was not as well defined. Kublai also abolished the imperial examinations of China's civil service legacy, which was not reinstated until Ayurbarwada Buyantu Khan's reign (1311–1320). Rossabi writes that Kublai recognized that in order to rule China, \"he had to employ Chinese advisors and officials, yet he could not rely totally on Chinese advisers because he had to maintain a delicate balancing act between ruling the sedentary civilization of China and preserving the cultural identity and values of the Mongols.\" And \"in governing China, he was concerned with the interests of his Chinese subjects, but also with exploiting the resources of the empire for his own aggrandizement. His motivations and objectives alternated from one to the other throughout his reign,\" according to Rossabi. Van Praag writes in The Status of Tibet that the Tibetans and Mongols, on the other hand, upheld a dual system of rule and an interdependent relationship that legitimated the succession of Mongol khans as universal Buddhist rulers, or chakravartin. Van Praag writes that \"Tibet remained a unique part of the Empire and was never fully integrated into it,\" citing examples such as a licensed border market that existed between China and Tibet during the Yuan.</td>\n","      <td>During the Yuan what existed between China and Tibet?</td>\n","      <td>{'text': ['a licensed border market'], 'answer_start': [1450]}</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>57283ac5ff5b5019007d9f90</td>\n","      <td>Federalism</td>\n","      <td>The Federalist Party of the United States was opposed by the Democratic-Republicans, including powerful figures such as Thomas Jefferson. The Democratic-Republicans mainly believed that: the Legislature had too much power (mainly because of the Necessary and Proper Clause) and that they were unchecked; the Executive had too much power, and that there was no check on the executive; a dictator would arise; and that a bill of rights should be coupled with the constitution to prevent a dictator (then believed to eventually be the president) from exploiting or tyrannizing citizens. The federalists, on the other hand, argued that it was impossible to list all the rights, and those that were not listed could be easily overlooked because they were not in the official bill of rights. Rather, rights in specific cases were to be decided by the judicial system of courts.</td>\n","      <td>Who decided the rights in specific cases?</td>\n","      <td>{'text': ['the judicial system of courts'], 'answer_start': [841]}</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>5a13828ec8eab200188dc9af</td>\n","      <td>Georgian_architecture</td>\n","      <td>Internal courtyards became more rare, except beside the stables, and the functional parts of the building were placed at the sides, or in separate buildings nearby hidden by trees. The views to and from the front and rear of the main block were concentrated on, with the side approaches usually much less important. The roof was typically invisible from the ground, though domes were sometimes visible in grander buildings. The roofline was generally clear of ornament except for a balustrade or the top of a pediment. Columns or pilasters, often topped by a pediment, were popular for ornament inside and out, and other ornament was generally geometrical or plant-based, rather than using the human figure.</td>\n","      <td>What was often used too accentuate functional parts of buildings?</td>\n","      <td>{'text': [], 'answer_start': []}</td>\n","    </tr>\n","  </tbody>\n","</table>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"n9qywopnIrJH"},"source":["## Preprocessing the training data"]},{"cell_type":"markdown","metadata":{"id":"YVx71GdAIrJH"},"source":["Before we can feed those texts to our model, we need to preprocess them. This is done by a 🤗 Transformers `Tokenizer` which will (as the name indicates) tokenize the inputs (including converting the tokens to their corresponding IDs in the pretrained vocabulary) and put it in a format the model expects, as well as generate the other inputs that model requires.\n","\n","To do all of this, we instantiate our tokenizer with the `AutoTokenizer.from_pretrained` method, which will ensure:\n","\n","- we get a tokenizer that corresponds to the model architecture we want to use,\n","- we download the vocabulary used when pretraining this specific checkpoint.\n","\n","That vocabulary will be cached, so it's not downloaded again the next time we run the cell."]},{"cell_type":"code","metadata":{"id":"eXNLu_-nIrJI","executionInfo":{"status":"ok","timestamp":1628351905164,"user_tz":240,"elapsed":6029,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"20c2ffad-45f9-4bcf-db48-b38b9d908634","colab":{"base_uri":"https://localhost:8080/","height":145,"referenced_widgets":["b99fb45f92ba46fca4875f667d9c4be8","166bc59774ab42b4931d2d7f7eb5eea1","e0fb65e1832746be8ebacc031836abf0","365df2cedebb4fe4b25b0e2c4d5bb51a","ef6b73af788b450ea3179e3e82532cac","27e2992571524568a5f45dafa3c121ba","66872480c56b405f8335fdb721b13589","f33de4345b7c4c4495239bb71e167337","e98f19c819c341d4b99dfd58dae026ac","bf85097328ff4115bfb7147328a6af95","2f1c3d11427841a9a59c4c4699167ebd","3817f5526bc248c0aa517156b95f32d3","afa9abbdaba14f569602d6981bcf2bae","190ec57b08384404820509a6576044dc","ceec2951f2d04b2782d2eccbfe1caaf0","0426043618f94629b9bb41b836b8ba64","6a79b12d82d64eb6ba3bbc2abd3e5f50","5f5d5c0fbdf940998c415fd9edb7d6fe","539caf5fe64b4947bd564f6d71811663","1f73522e9c714dd6847e144e6d16dea5","c8c58181f1f742e59ba897429110f499","f1cce139445a4140a006a948faa058d5","beeacbc09c934b909b27b3b82473799f","7d269ce7e4d1403783a5af4dabb1d71e","24ab713b7f0b445cb0994d9f96c268a8","2929412a68064d77be35a086d786fe12","6e91c35d4cdc416087f0849cbbe97bb1","ffe2d3b62e104674a3f6392f8b8d20c7","0e8b25bc83da4641b1b9d432f304254f","45bea492fc1741ca94202254298da920","19084032c58d436b992729b409cf3cb2","5dcc7013f2d44596830cc814a9f83d90","e1255f271ef84e21a6b2db6600eba098","c188d65170484831acc76e299c36490d","3e9a2214ee78487abb2c7c387a4bb6ab","5a51be8ff06948f8b9baddc91747d0c3","097e3f1b5ea04dd3ae22f65a6b94cf02","42a6fa950d0a487c9af4675406e93b48","3534f3a3266244d6a0aa3b5925caa997","fcb0d19838634c9baa1b1784bea59eb3","48176dfeda434c3fbe4cb6da14c378a9","20cf5ed6d50144a8a1423bfeb6a28fec","d089b7ae33904c48ba205c088ef586ce","01a4ff6aa6eb48a18ea30e41cf4c0fe2"]}},"source":["from transformers import AutoTokenizer\n","    \n","tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)"],"execution_count":12,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"b99fb45f92ba46fca4875f667d9c4be8","version_minor":0,"version_major":2},"text/plain":["Downloading:   0%|          | 0.00/28.0 [00:00<?, ?B/s]"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"3817f5526bc248c0aa517156b95f32d3","version_minor":0,"version_major":2},"text/plain":["Downloading:   0%|          | 0.00/442 [00:00<?, ?B/s]"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"beeacbc09c934b909b27b3b82473799f","version_minor":0,"version_major":2},"text/plain":["Downloading:   0%|          | 0.00/232k [00:00<?, ?B/s]"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"c188d65170484831acc76e299c36490d","version_minor":0,"version_major":2},"text/plain":["Downloading:   0%|          | 0.00/466k [00:00<?, ?B/s]"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"Vl6IidfdIrJK"},"source":["The following assertion ensures that our tokenizer is a fast tokenizers (backed by Rust) from the 🤗 Tokenizers library. Those fast tokenizers are available for almost all models, and we will need some of the special features they have for our preprocessing."]},{"cell_type":"code","metadata":{"id":"ScbFgUNKTRj3","executionInfo":{"status":"ok","timestamp":1628351942883,"user_tz":240,"elapsed":224,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["import transformers\n","assert isinstance(tokenizer, transformers.PreTrainedTokenizerFast)"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TcsySub4TRj3"},"source":["You can check which type of models have a fast tokenizer available and which don't on the [big table of models](https://huggingface.co/transformers/index.html#bigtable)."]},{"cell_type":"markdown","metadata":{"id":"rowT4iCLIrJK"},"source":["You can directly call this tokenizer on two sentences (one for the answer, one for the context):"]},{"cell_type":"code","metadata":{"id":"a5hBlsrHIrJL","executionInfo":{"status":"ok","timestamp":1628352056486,"user_tz":240,"elapsed":237,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"05faa394-fc5d-4464-c3cf-8872e169c80c","colab":{"base_uri":"https://localhost:8080/"}},"source":["tokenizer(\"What is your name?\", \"My name is Sylvain.\")"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'input_ids': [101, 2054, 2003, 2115, 2171, 1029, 102, 2026, 2171, 2003, 25353, 22144, 2378, 1012, 102], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"FgZHtssxTRj4"},"source":["Depending on the model you selected, you will see different keys in the dictionary returned by the cell above. They don't matter much for what we're doing here (just know they are required by the model we will instantiate later), you can learn more about them in [this tutorial](https://huggingface.co/transformers/preprocessing.html) if you're interested.\n","\n","Now one specific thing for the preprocessing in question answering is how to deal with very long documents. We usually truncate them in other tasks, when they are longer than the model maximum sentence length, but here, removing part of the the context might result in losing the answer we are looking for. To deal with this, we will allow one (long) example in our dataset to give several input features, each of length shorter than the maximum length of the model (or the one we set as a hyper-parameter). Also, just in case the answer lies at the point we split a long context, we allow some overlap between the features we generate controlled by the hyper-parameter `doc_stride`:"]},{"cell_type":"code","metadata":{"id":"2qF8dzFETRj5","executionInfo":{"status":"ok","timestamp":1628352065159,"user_tz":240,"elapsed":245,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["max_length = 384 # The maximum length of a feature (question and context)\n","doc_stride = 128 # The authorized overlap between two part of the context when splitting it is needed."],"execution_count":15,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"foZhqAHfTRj5"},"source":["Let's find one long example in our dataset:"]},{"cell_type":"code","metadata":{"id":"ljzujsuTTRj6","executionInfo":{"status":"ok","timestamp":1628352077963,"user_tz":240,"elapsed":255,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["for i, example in enumerate(datasets[\"train\"]):\n","    if len(tokenizer(example[\"question\"], example[\"context\"])[\"input_ids\"]) > 384:\n","        break\n","example = datasets[\"train\"][i]"],"execution_count":16,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ceWdTvPSTRj6"},"source":["Without any truncation, we get the following length for the input IDs:"]},{"cell_type":"code","metadata":{"id":"HQVvydP-TRj6","executionInfo":{"status":"ok","timestamp":1628352089584,"user_tz":240,"elapsed":205,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"9803d364-b642-4834-8ef5-d01dd992cf5d","colab":{"base_uri":"https://localhost:8080/"}},"source":["len(tokenizer(example[\"question\"], example[\"context\"])[\"input_ids\"])"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["437"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"0JzqVRiPTRj6"},"source":["Now, if we just truncate, we will lose information (and possibly the answer to our question):"]},{"cell_type":"code","metadata":{"id":"woHgRkV6TRj7","executionInfo":{"status":"ok","timestamp":1628352111649,"user_tz":240,"elapsed":188,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"b2c96ddc-d401-495c-b5ee-1725f61aa865","colab":{"base_uri":"https://localhost:8080/"}},"source":["len(tokenizer(example[\"question\"], example[\"context\"], max_length=max_length, truncation=\"only_second\")[\"input_ids\"])"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["384"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"QbojeNnNTRj8"},"source":["Note that we never want to truncate the question, only the context, else the `only_second` truncation picked. Now, our tokenizer can automatically return us a list of features capped by a certain maximum length, with the overlap we talked above, we just have to tell it with `return_overflowing_tokens=True` and by passing the stride:"]},{"cell_type":"code","metadata":{"id":"VkUcpqRSTRj8","executionInfo":{"status":"ok","timestamp":1628352121172,"user_tz":240,"elapsed":274,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["tokenized_example = tokenizer(\n","    example[\"question\"],\n","    example[\"context\"],\n","    max_length=max_length,\n","    truncation=\"only_second\",\n","    return_overflowing_tokens=True,\n","    stride=doc_stride\n",")"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4HHKd9oCTRj9"},"source":["Now we don't have one list of `input_ids`, but several: "]},{"cell_type":"code","metadata":{"id":"EIDuQtrvTRj9","executionInfo":{"status":"ok","timestamp":1628352130993,"user_tz":240,"elapsed":195,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"cee40ba7-2ff3-4b15-ee43-667598cfbf29","colab":{"base_uri":"https://localhost:8080/"}},"source":["[len(x) for x in tokenized_example[\"input_ids\"]]"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[384, 192]"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"6lyV1mOBTRj9"},"source":["And if we decode them, we can see the overlap:"]},{"cell_type":"code","metadata":{"id":"QOtUnapCTRj-","executionInfo":{"status":"ok","timestamp":1628352138447,"user_tz":240,"elapsed":290,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"1f600c8b-ad46-4273-b7b8-a2a11ad9c098","colab":{"base_uri":"https://localhost:8080/"}},"source":["for x in tokenized_example[\"input_ids\"][:2]:\n","    print(tokenizer.decode(x))"],"execution_count":21,"outputs":[{"output_type":"stream","text":["[CLS] beyonce got married in 2008 to whom? [SEP] on april 4, 2008, beyonce married jay z. she publicly revealed their marriage in a video montage at the listening party for her third studio album, i am... sasha fierce, in manhattan's sony club on october 22, 2008. i am... sasha fierce was released on november 18, 2008 in the united states. the album formally introduces beyonce's alter ego sasha fierce, conceived during the making of her 2003 single \" crazy in love \", selling 482, 000 copies in its first week, debuting atop the billboard 200, and giving beyonce her third consecutive number - one album in the us. the album featured the number - one song \" single ladies ( put a ring on it ) \" and the top - five songs \" if i were a boy \" and \" halo \". achieving the accomplishment of becoming her longest - running hot 100 single in her career, \" halo \"'s success in the us helped beyonce attain more top - ten singles on the list than any other woman during the 2000s. it also included the successful \" sweet dreams \", and singles \" diva \", \" ego \", \" broken - hearted girl \" and \" video phone \". the music video for \" single ladies \" has been parodied and imitated around the world, spawning the \" first major dance craze \" of the internet age according to the toronto star. the video has won several awards, including best video at the 2009 mtv europe music awards, the 2009 scottish mobo awards, and the 2009 bet awards. at the 2009 mtv video music awards, the video was nominated for nine awards, ultimately winning three including video of the year. its failure to win the best female video category, which went to american country pop singer taylor swift's \" you belong with me \", led to kanye west interrupting the ceremony and beyonce [SEP]\n","[CLS] beyonce got married in 2008 to whom? [SEP] single ladies \" has been parodied and imitated around the world, spawning the \" first major dance craze \" of the internet age according to the toronto star. the video has won several awards, including best video at the 2009 mtv europe music awards, the 2009 scottish mobo awards, and the 2009 bet awards. at the 2009 mtv video music awards, the video was nominated for nine awards, ultimately winning three including video of the year. its failure to win the best female video category, which went to american country pop singer taylor swift's \" you belong with me \", led to kanye west interrupting the ceremony and beyonce improvising a re - presentation of swift's award during her own acceptance speech. in march 2009, beyonce embarked on the i am... world tour, her second headlining worldwide concert tour, consisting of 108 shows, grossing $ 119. 5 million. [SEP]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2byANLOtTRj-"},"source":["Now this will give us some work to properly treat the answers: we need to find in which of those features the answer actually is, and where exactly in that feature. The models we will use require the start and end positions of these answers in the tokens, so we will also need to to map parts of the original context to some tokens. Thankfully, the tokenizer we're using can help us with that by returning an `offset_mapping`:"]},{"cell_type":"code","metadata":{"id":"-9XjoY9mTRj-","executionInfo":{"status":"ok","timestamp":1628352151720,"user_tz":240,"elapsed":333,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"f77e4b87-191c-431a-ebdf-a88e1a44737b","colab":{"base_uri":"https://localhost:8080/"}},"source":["tokenized_example = tokenizer(\n","    example[\"question\"],\n","    example[\"context\"],\n","    max_length=max_length,\n","    truncation=\"only_second\",\n","    return_overflowing_tokens=True,\n","    return_offsets_mapping=True,\n","    stride=doc_stride\n",")\n","print(tokenized_example[\"offset_mapping\"][0][:100])"],"execution_count":22,"outputs":[{"output_type":"stream","text":["[(0, 0), (0, 7), (8, 11), (12, 19), (20, 22), (23, 27), (28, 30), (31, 35), (35, 36), (0, 0), (0, 2), (3, 8), (9, 10), (10, 11), (12, 16), (16, 17), (18, 25), (26, 33), (34, 37), (38, 39), (39, 40), (41, 44), (45, 53), (54, 62), (63, 68), (69, 77), (78, 80), (81, 82), (83, 88), (89, 93), (93, 96), (97, 99), (100, 103), (104, 113), (114, 119), (120, 123), (124, 127), (128, 133), (134, 140), (141, 146), (146, 147), (148, 149), (150, 152), (152, 153), (153, 154), (154, 155), (156, 161), (162, 168), (168, 169), (170, 172), (173, 182), (182, 183), (183, 184), (185, 189), (190, 194), (195, 197), (198, 205), (206, 208), (208, 209), (210, 214), (214, 215), (216, 217), (218, 220), (220, 221), (221, 222), (222, 223), (224, 229), (230, 236), (237, 240), (241, 249), (250, 252), (253, 261), (262, 264), (264, 265), (266, 270), (271, 273), (274, 277), (278, 284), (285, 291), (291, 292), (293, 296), (297, 302), (303, 311), (312, 322), (323, 330), (330, 331), (331, 332), (333, 338), (339, 342), (343, 348), (349, 355), (355, 356), (357, 366), (367, 373), (374, 377), (378, 384), (385, 387), (388, 391), (392, 396), (397, 403)]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"SyrIlWrYTRj_"},"source":["This gives, for each index of our input IDS, the corresponding start and end character in the original text that gave our token. The very first token (`[CLS]`) has (0, 0) because it doesn't correspond to any part of the question/answer, then the second token is the same as the characters 0 to 3 of the question:"]},{"cell_type":"code","metadata":{"id":"v4jMYfbFTRj_","executionInfo":{"status":"ok","timestamp":1628352155701,"user_tz":240,"elapsed":189,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"35d4b97e-ee56-4b13-faa3-3ccc9f2c1330","colab":{"base_uri":"https://localhost:8080/"}},"source":["first_token_id = tokenized_example[\"input_ids\"][0][1]\n","offsets = tokenized_example[\"offset_mapping\"][0][1]\n","print(tokenizer.convert_ids_to_tokens([first_token_id])[0], example[\"question\"][offsets[0]:offsets[1]])"],"execution_count":23,"outputs":[{"output_type":"stream","text":["beyonce Beyonce\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"48s7hrVOTRj_"},"source":["So we can use this mapping to find the position of the start and end tokens of our answer in a given feature. We just have to distinguish which parts of the offsets correspond to the question and which part correspond to the context, this is where the `sequence_ids` method of our `tokenized_example` can be useful:"]},{"cell_type":"code","metadata":{"id":"pKG7_xclTRj_","executionInfo":{"status":"ok","timestamp":1628352162317,"user_tz":240,"elapsed":199,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"3e0ff2bc-b312-4c38-d1f3-04e38060b550","colab":{"base_uri":"https://localhost:8080/"}},"source":["sequence_ids = tokenized_example.sequence_ids()\n","print(sequence_ids)"],"execution_count":24,"outputs":[{"output_type":"stream","text":["[None, 0, 0, 0, 0, 0, 0, 0, 0, None, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, None]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"hPfBhkavTRkA"},"source":["It returns `None` for the special tokens, then 0 or 1 depending on whether the corresponding token comes from the first sentence past (the question) or the second (the context). Now with all of this, we can find the first and last token of the answer in one of our input feature (or if the answer is not in this feature):"]},{"cell_type":"code","metadata":{"id":"VUmhzUlOTRkA","executionInfo":{"status":"ok","timestamp":1628352165078,"user_tz":240,"elapsed":219,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"8f012fd9-9b43-466d-bd04-fe8824df3766","colab":{"base_uri":"https://localhost:8080/"}},"source":["answers = example[\"answers\"]\n","start_char = answers[\"answer_start\"][0]\n","end_char = start_char + len(answers[\"text\"][0])\n","\n","# Start token index of the current span in the text.\n","token_start_index = 0\n","while sequence_ids[token_start_index] != 1:\n","    token_start_index += 1\n","\n","# End token index of the current span in the text.\n","token_end_index = len(tokenized_example[\"input_ids\"][0]) - 1\n","while sequence_ids[token_end_index] != 1:\n","    token_end_index -= 1\n","\n","# Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\n","offsets = tokenized_example[\"offset_mapping\"][0]\n","if (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n","    # Move the token_start_index and token_end_index to the two ends of the answer.\n","    # Note: we could go after the last offset if the answer is the last word (edge case).\n","    while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n","        token_start_index += 1\n","    start_position = token_start_index - 1\n","    while offsets[token_end_index][1] >= end_char:\n","        token_end_index -= 1\n","    end_position = token_end_index + 1\n","    print(start_position, end_position)\n","else:\n","    print(\"The answer is not in this feature.\")"],"execution_count":25,"outputs":[{"output_type":"stream","text":["18 19\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JfSOJYGITRkA"},"source":["And we can double check that it is indeed the theoretical answer:"]},{"cell_type":"code","metadata":{"id":"r8V4HZKYTRkB","executionInfo":{"status":"ok","timestamp":1628352174024,"user_tz":240,"elapsed":224,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"9a86405c-34f8-4db0-fa55-361e24e8f9d9","colab":{"base_uri":"https://localhost:8080/"}},"source":["print(tokenizer.decode(tokenized_example[\"input_ids\"][0][start_position: end_position+1]))\n","print(answers[\"text\"][0])"],"execution_count":26,"outputs":[{"output_type":"stream","text":["jay z\n","Jay Z\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4MYAS_ghTRkB"},"source":["For this notebook to work with any kind of models, we need to account for the special case where the model expects padding on the left (in which case we switch the order of the question and the context):"]},{"cell_type":"code","metadata":{"id":"FR5np96RTRkC","executionInfo":{"status":"ok","timestamp":1628352186067,"user_tz":240,"elapsed":175,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["pad_on_right = tokenizer.padding_side == \"right\""],"execution_count":27,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ftKVqYqRTRkC"},"source":["Now let's put everything together in one function we will apply to our training set. In the case of impossible answers (the answer is in another feature given by an example with a long context), we set the cls index for both the start and end position. We could also simply discard those examples from the training set if the flag `allow_impossible_answers` is `False`. Since the preprocessing is already complex enough as it is, we've kept is simple for this part."]},{"cell_type":"code","metadata":{"id":"u6j6NZo3TRkD","executionInfo":{"status":"ok","timestamp":1628352189407,"user_tz":240,"elapsed":230,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["def prepare_train_features(examples):\n","    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n","    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n","    # left whitespace\n","    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n","\n","    # Tokenize our examples with truncation and padding, but keep the overflows using a stride. This results\n","    # in one example possible giving several features when a context is long, each of those features having a\n","    # context that overlaps a bit the context of the previous feature.\n","    tokenized_examples = tokenizer(\n","        examples[\"question\" if pad_on_right else \"context\"],\n","        examples[\"context\" if pad_on_right else \"question\"],\n","        truncation=\"only_second\" if pad_on_right else \"only_first\",\n","        max_length=max_length,\n","        stride=doc_stride,\n","        return_overflowing_tokens=True,\n","        return_offsets_mapping=True,\n","        padding=\"max_length\",\n","    )\n","\n","    # Since one example might give us several features if it has a long context, we need a map from a feature to\n","    # its corresponding example. This key gives us just that.\n","    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n","    # The offset mappings will give us a map from token to character position in the original context. This will\n","    # help us compute the start_positions and end_positions.\n","    offset_mapping = tokenized_examples.pop(\"offset_mapping\")\n","\n","    # Let's label those examples!\n","    tokenized_examples[\"start_positions\"] = []\n","    tokenized_examples[\"end_positions\"] = []\n","\n","    for i, offsets in enumerate(offset_mapping):\n","        # We will label impossible answers with the index of the CLS token.\n","        input_ids = tokenized_examples[\"input_ids\"][i]\n","        cls_index = input_ids.index(tokenizer.cls_token_id)\n","\n","        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n","        sequence_ids = tokenized_examples.sequence_ids(i)\n","\n","        # One example can give several spans, this is the index of the example containing this span of text.\n","        sample_index = sample_mapping[i]\n","        answers = examples[\"answers\"][sample_index]\n","        # If no answers are given, set the cls_index as answer.\n","        if len(answers[\"answer_start\"]) == 0:\n","            tokenized_examples[\"start_positions\"].append(cls_index)\n","            tokenized_examples[\"end_positions\"].append(cls_index)\n","        else:\n","            # Start/end character index of the answer in the text.\n","            start_char = answers[\"answer_start\"][0]\n","            end_char = start_char + len(answers[\"text\"][0])\n","\n","            # Start token index of the current span in the text.\n","            token_start_index = 0\n","            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n","                token_start_index += 1\n","\n","            # End token index of the current span in the text.\n","            token_end_index = len(input_ids) - 1\n","            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n","                token_end_index -= 1\n","\n","            # Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\n","            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n","                tokenized_examples[\"start_positions\"].append(cls_index)\n","                tokenized_examples[\"end_positions\"].append(cls_index)\n","            else:\n","                # Otherwise move the token_start_index and token_end_index to the two ends of the answer.\n","                # Note: we could go after the last offset if the answer is the last word (edge case).\n","                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n","                    token_start_index += 1\n","                tokenized_examples[\"start_positions\"].append(token_start_index - 1)\n","                while offsets[token_end_index][1] >= end_char:\n","                    token_end_index -= 1\n","                tokenized_examples[\"end_positions\"].append(token_end_index + 1)\n","\n","    return tokenized_examples"],"execution_count":28,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0lm8ozrJIrJR"},"source":["This function works with one or several examples. In the case of several examples, the tokenizer will return a list of lists for each key:"]},{"cell_type":"code","metadata":{"id":"-b70jh26IrJS","executionInfo":{"status":"ok","timestamp":1628352198825,"user_tz":240,"elapsed":261,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["features = prepare_train_features(datasets['train'][:5])"],"execution_count":29,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zS-6iXTkIrJT"},"source":["To apply this function on all the sentences (or pairs of sentences) in our dataset, we just use the `map` method of our `dataset` object we created earlier. This will apply the function on all the elements of all the splits in `dataset`, so our training, validation and testing data will be preprocessed in one single command. Since our preprocessing changes the number of samples, we need to remove the old columns when applying it."]},{"cell_type":"code","metadata":{"id":"DDtsaJeVIrJT","executionInfo":{"status":"ok","timestamp":1628352288939,"user_tz":240,"elapsed":87519,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"1e50778b-de5e-4453-97e9-d06126613510","colab":{"base_uri":"https://localhost:8080/","height":81,"referenced_widgets":["8f007a3716694215b5c6e242fe6449ea","b57aa81efc18468081c18d7fa57c3f32","91c06235b38b4c719cba2faf41d8089c","244932ca041545fea2c833d6388e481e","bee69f1e021140ea88cee379c815148e","c8bf07daf8dd4b0198d4c4e8ad80d5f8","c5c89fbd5f11457085bc9209479c71ef","fa599ab7407f451188abfbd011ba5096","37c045b64e8f4ce69bcec2d9222850a7","c40e85675fdc4fb386c3a7defd590875","1ece4015cd244982b854da21092ca4fd","4503a52a8a3c46daa32e2f25ff7e6270","f831b76a25c24f7d92b30dfb235e316a","ec74427c375841b28f25fefd9d630dd4","5d9e55de89ff46e7b9223ea68182d569","bea52b5c1b84499993ce5b418e3a088a","11c82e8def5848079cef1610bed26016","d29de6e5944e432794002bb03fbb8a10","59fbeb92a39044888307cda118839d8a","d15b40a0cd7c4f8898dc3d717f4488be","efb41b5d107b43858d50956bb13cd38b","4bcdfeb6bb6446688eed5bf93931abee"]}},"source":["tokenized_datasets = datasets.map(prepare_train_features, batched=True, remove_columns=datasets[\"train\"].column_names)"],"execution_count":30,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"8f007a3716694215b5c6e242fe6449ea","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/131 [00:00<?, ?ba/s]"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"4503a52a8a3c46daa32e2f25ff7e6270","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/12 [00:00<?, ?ba/s]"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"voWiw8C7IrJV"},"source":["Even better, the results are automatically cached by the 🤗 Datasets library to avoid spending time on this step the next time you run your notebook. The 🤗 Datasets library is normally smart enough to detect when the function you pass to map has changed (and thus requires to not use the cache data). For instance, it will properly detect if you change the task in the first cell and rerun the notebook. 🤗 Datasets warns you when it uses cached files, you can pass `load_from_cache_file=False` in the call to `map` to not use the cached files and force the preprocessing to be applied again.\n","\n","Note that we passed `batched=True` to encode the texts by batches together. This is to leverage the full benefit of the fast tokenizer we loaded earlier, which will use multi-threading to treat the texts in a batch concurrently."]},{"cell_type":"markdown","metadata":{"id":"545PP3o8IrJV"},"source":["## Fine-tuning the model"]},{"cell_type":"markdown","metadata":{"id":"FBiW8UpKIrJW"},"source":["Now that our data is ready for training, we can download the pretrained model and fine-tune it. Since our task is question answering, we use the `AutoModelForQuestionAnswering` class. Like with the tokenizer, the `from_pretrained` method will download and cache the model for us:"]},{"cell_type":"code","metadata":{"id":"TlqNaB8jIrJW","executionInfo":{"status":"ok","timestamp":1628352309618,"user_tz":240,"elapsed":8728,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"d9a80fcc-047a-462e-830b-c815d8bfee0a","colab":{"base_uri":"https://localhost:8080/","height":154,"referenced_widgets":["37abd14957fd48d38a432061108d8551","fa2d5d047fbe4a3496809ff5dc458c46","b95da9b49cef432fa046dfd48c768420","bd4bb16f8f7e47638840abc47ca11b94","dd198fc02d954bb29863fff8608fb99a","f30e99b70fcd4568ae75702d74e86fdc","07763cf7871b469c9326bbb0e215b068","721ebe00ade34dc39de5968e537ce61d","0b6c66ff688d4007a1bdd91b3a1352dd","8c057aaf38284463a9314507312be97a","3e8beb006f4b4111a84a58ef25645b1f"]}},"source":["from transformers import AutoModelForQuestionAnswering, TrainingArguments, Trainer\n","\n","model = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)"],"execution_count":31,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"37abd14957fd48d38a432061108d8551","version_minor":0,"version_major":2},"text/plain":["Downloading:   0%|          | 0.00/268M [00:00<?, ?B/s]"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Some weights of the model checkpoint at distilbert-base-uncased were not used when initializing DistilBertForQuestionAnswering: ['vocab_projector.bias', 'vocab_transform.weight', 'vocab_transform.bias', 'vocab_layer_norm.weight', 'vocab_projector.weight', 'vocab_layer_norm.bias']\n","- This IS expected if you are initializing DistilBertForQuestionAnswering from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing DistilBertForQuestionAnswering from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","Some weights of DistilBertForQuestionAnswering were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['qa_outputs.bias', 'qa_outputs.weight']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"CczA5lJlIrJX"},"source":["The warning is telling us we are throwing away some weights (the `vocab_transform` and `vocab_layer_norm` layers) and randomly initializing some other (the `pre_classifier` and `classifier` layers). This is absolutely normal in this case, because we are removing the head used to pretrain the model on a masked language modeling objective and replacing it with a new head for which we don't have pretrained weights, so the library warns us we should fine-tune this model before using it for inference, which is exactly what we are going to do."]},{"cell_type":"markdown","metadata":{"id":"_N8urzhyIrJY"},"source":["To instantiate a `Trainer`, we will need to define three more things. The most important is the [`TrainingArguments`](https://huggingface.co/transformers/main_classes/trainer.html#transformers.TrainingArguments), which is a class that contains all the attributes to customize the training. It requires one folder name, which will be used to save the checkpoints of the model, and all other arguments are optional:"]},{"cell_type":"code","metadata":{"id":"Bliy8zgjIrJY","executionInfo":{"status":"ok","timestamp":1628352333648,"user_tz":240,"elapsed":168,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["model_name = model_checkpoint.split(\"/\")[-1]\n","args = TrainingArguments(\n","    f\"test-squad\",\n","    evaluation_strategy = \"epoch\",\n","    learning_rate=2e-5,\n","    per_device_train_batch_size=batch_size,\n","    per_device_eval_batch_size=batch_size,\n","    num_train_epochs=3,\n","    weight_decay=0.01,\n","    push_to_hub=False,\n","    push_to_hub_model_id=f\"{model_name}-finetuned-squad\",\n",")"],"execution_count":33,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"km3pGVdTIrJc"},"source":["Here we set the evaluation to be done at the end of each epoch, tweak the learning rate, use the `batch_size` defined at the top of the notebook and customize the number of epochs for training, as well as the weight decay.\n","\n","The last two arguments are to setup everything so we can push the model to the [Hub](https://huggingface.co/models) at the end of training. Remove the two of them if you didn't follow the installation steps at the top of the notebook, otherwise you can change the value of `push_to_hub_model_id` to something you would prefer."]},{"cell_type":"markdown","metadata":{"id":"ytVF8KgdTRkH"},"source":["Then we will need a data collator that will batch our processed examples together, here the default one will work:"]},{"cell_type":"code","metadata":{"id":"OE8qwfG1TRkH","executionInfo":{"status":"ok","timestamp":1628352341905,"user_tz":240,"elapsed":166,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["from transformers import default_data_collator\n","\n","data_collator = default_data_collator"],"execution_count":34,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rXuFTAzDIrJe"},"source":["We will evaluate our model and compute metrics in the next section (this is a very long operation, so we will only compute the evaluation loss during training).\n","\n","Then we just need to pass all of this along with our datasets to the `Trainer`:"]},{"cell_type":"code","metadata":{"id":"imY1oC3SIrJf","executionInfo":{"status":"ok","timestamp":1628352375155,"user_tz":240,"elapsed":12265,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["trainer = Trainer(\n","    model,\n","    args,\n","    train_dataset=tokenized_datasets[\"train\"],\n","    eval_dataset=tokenized_datasets[\"validation\"],\n","    data_collator=data_collator,\n","    tokenizer=tokenizer,\n",")"],"execution_count":35,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CdzABDVcIrJg"},"source":["We can now finetune our model by just calling the `train` method:"]},{"cell_type":"code","metadata":{"id":"uNx5pyRlIrJh","outputId":"89cee28f-8ecd-481f-d0a9-29260b833b0c","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["trainer.train()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["***** Running training *****\n","  Num examples = 131754\n","  Num Epochs = 3\n","  Instantaneous batch size per device = 16\n","  Total train batch size (w. parallel, distributed & accumulation) = 16\n","  Gradient Accumulation steps = 1\n","  Total optimization steps = 24705\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","      \n","      <progress value='8096' max='24705' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      [ 8096/24705 1:35:27 < 3:15:53, 1.41 it/s, Epoch 0.98/3]\n","    </div>\n","    <table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: left;\">\n","      <th>Epoch</th>\n","      <th>Training Loss</th>\n","      <th>Validation Loss</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table><p>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving model checkpoint to test-squad/checkpoint-500\n","Configuration saved in test-squad/checkpoint-500/config.json\n","Model weights saved in test-squad/checkpoint-500/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-500/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-500/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-1000\n","Configuration saved in test-squad/checkpoint-1000/config.json\n","Model weights saved in test-squad/checkpoint-1000/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-1000/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-1000/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-1500\n","Configuration saved in test-squad/checkpoint-1500/config.json\n","Model weights saved in test-squad/checkpoint-1500/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-1500/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-1500/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-2000\n","Configuration saved in test-squad/checkpoint-2000/config.json\n","Model weights saved in test-squad/checkpoint-2000/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-2000/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-2000/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-2500\n","Configuration saved in test-squad/checkpoint-2500/config.json\n","Model weights saved in test-squad/checkpoint-2500/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-2500/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-2500/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-3000\n","Configuration saved in test-squad/checkpoint-3000/config.json\n","Model weights saved in test-squad/checkpoint-3000/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-3000/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-3000/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-3500\n","Configuration saved in test-squad/checkpoint-3500/config.json\n","Model weights saved in test-squad/checkpoint-3500/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-3500/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-3500/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-4000\n","Configuration saved in test-squad/checkpoint-4000/config.json\n","Model weights saved in test-squad/checkpoint-4000/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-4000/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-4000/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-4500\n","Configuration saved in test-squad/checkpoint-4500/config.json\n","Model weights saved in test-squad/checkpoint-4500/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-4500/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-4500/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-5000\n","Configuration saved in test-squad/checkpoint-5000/config.json\n","Model weights saved in test-squad/checkpoint-5000/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-5000/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-5000/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-5500\n","Configuration saved in test-squad/checkpoint-5500/config.json\n","Model weights saved in test-squad/checkpoint-5500/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-5500/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-5500/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-6000\n","Configuration saved in test-squad/checkpoint-6000/config.json\n","Model weights saved in test-squad/checkpoint-6000/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-6000/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-6000/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-6500\n","Configuration saved in test-squad/checkpoint-6500/config.json\n","Model weights saved in test-squad/checkpoint-6500/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-6500/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-6500/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-7000\n","Configuration saved in test-squad/checkpoint-7000/config.json\n","Model weights saved in test-squad/checkpoint-7000/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-7000/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-7000/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-7500\n","Configuration saved in test-squad/checkpoint-7500/config.json\n","Model weights saved in test-squad/checkpoint-7500/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-7500/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-7500/special_tokens_map.json\n","Saving model checkpoint to test-squad/checkpoint-8000\n","Configuration saved in test-squad/checkpoint-8000/config.json\n","Model weights saved in test-squad/checkpoint-8000/pytorch_model.bin\n","tokenizer config file saved in test-squad/checkpoint-8000/tokenizer_config.json\n","Special tokens file saved in test-squad/checkpoint-8000/special_tokens_map.json\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"nUeoF7VCTRkI"},"source":["Since this training is particularly long, let's save the model just in case we need to restart."]},{"cell_type":"code","metadata":{"id":"g17fQXEpTRkJ"},"source":["trainer.save_model(\"test-squad-trained\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zT0dlfNCTRkJ"},"source":["## Evaluation"]},{"cell_type":"markdown","metadata":{"id":"e6ODwYWnTRkJ"},"source":["Evaluating our model will require a bit more work, as we will need to map the predictions of our model back to parts of the context. The model itself predicts logits for the start and en position of our answers: if we take a batch from our validation datalaoder, here is the output our model gives us:"]},{"cell_type":"code","metadata":{"id":"sGpbbsvBTRkJ","outputId":"8420ddf3-63da-40d2-9a50-8c32ca27352c"},"source":["import torch\n","\n","for batch in trainer.get_eval_dataloader():\n","    break\n","batch = {k: v.to(trainer.args.device) for k, v in batch.items()}\n","with torch.no_grad():\n","    output = trainer.model(**batch)\n","output.keys()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["odict_keys(['loss', 'start_logits', 'end_logits'])"]},"metadata":{"tags":[]},"execution_count":0}]},{"cell_type":"markdown","metadata":{"id":"em3_26_dTRkK"},"source":["The output of the model is a dict-like object that contains the loss (since we provided labels), the start and end logits. We won't need the loss for our predictions, let's have a look a the logits:"]},{"cell_type":"code","metadata":{"id":"6LagM8ZiTRkK","outputId":"da0a0fa4-6017-46f3-bf6b-a9e04309a7c0"},"source":["output.start_logits.shape, output.end_logits.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(torch.Size([16, 384]), torch.Size([16, 384]))"]},"metadata":{"tags":[]},"execution_count":0}]},{"cell_type":"markdown","metadata":{"id":"P7LafBxTTRkK"},"source":["We have one logit for each feature and each token. The most obvious thing to predict an answer for each featyre is to take the index for the maximum of the start logits as a start position and the index of the maximum of the end logits as an end position."]},{"cell_type":"code","metadata":{"id":"sh2ZhmhVTRkL","outputId":"16a2cad8-d708-4392-d28f-9c44474072f7"},"source":["output.start_logits.argmax(dim=-1), output.end_logits.argmax(dim=-1)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([ 46,  57,  78,  43, 118,  15,  72,  35,  15,  34,  73,  41,  80,  91,\n","         156,  35], device='cuda:0'),\n"," tensor([ 47,  58,  81,  55, 118, 110,  75,  37, 110,  36,  76,  53,  83,  94,\n","         158,  35], device='cuda:0'))"]},"metadata":{"tags":[]},"execution_count":0}]},{"cell_type":"markdown","metadata":{"id":"NCzgfHcZTRkM"},"source":["This will work great in a lot of cases, but what if this prediction gives us something impossible: the start position could be greater than the end position, or point to a span of text in the question instead of the answer. In that case, we might want to look at the second best prediction to see if it gives a possible answer and select that instead.\n","\n","However, picking the second best answer is not as easy as picking the best one: is it the second best index in the start logits with the best index in the end logits? Or the best index in the start logits with the second best index in the end logits? And if that second best answer is not possible either, it gets even trickier for the third best answer.\n","\n","\n","To classify our answers, we will use the score obtained by adding the start and end logits. We won't try to order all the possible answers and limit ourselves to with a hyper-parameter we call `n_best_size`. We'll pick the best indices in the start and end logits and gather all the answers this predicts. After checking if each one is valid, we will sort them by their score and keep the best one. Here is how we would do this on the first feature in the batch:"]},{"cell_type":"code","metadata":{"id":"ATaVqdyuTRkN"},"source":["n_best_size = 20"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"saicwYlfTRkN"},"source":["import numpy as np\n","\n","start_logits = output.start_logits[0].cpu().numpy()\n","end_logits = output.end_logits[0].cpu().numpy()\n","# Gather the indices the best start/end logits:\n","start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n","end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n","valid_answers = []\n","for start_index in start_indexes:\n","    for end_index in end_indexes:\n","        if start_index <= end_index: # We need to refine that test to check the answer is inside the context\n","            valid_answers.append(\n","                {\n","                    \"score\": start_logits[start_index] + end_logits[end_index],\n","                    \"text\": \"\" # We need to find a way to get back the original substring corresponding to the answer in the context\n","                }\n","            )"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cT40TYRFTRkO"},"source":["And then we can sort the `valid_answers` according to their `score` and only keep the best one. The only point left is how to check a given span is inside the context (and not the question) and how to get back the text inside. To do this, we need to add two things to our validation features:\n","- the ID of the example that generated the feature (since each example can generate several features, as seen before);\n","- the offset mapping that will give us a map from token indices to character positions in the context.\n","\n","That's why we will re-process the validation set with the following function, slightly different from `prepare_train_features`:"]},{"cell_type":"code","metadata":{"id":"P-XNfZcPTRkO"},"source":["def prepare_validation_features(examples):\n","    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n","    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n","    # left whitespace\n","    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n","\n","    # Tokenize our examples with truncation and maybe padding, but keep the overflows using a stride. This results\n","    # in one example possible giving several features when a context is long, each of those features having a\n","    # context that overlaps a bit the context of the previous feature.\n","    tokenized_examples = tokenizer(\n","        examples[\"question\" if pad_on_right else \"context\"],\n","        examples[\"context\" if pad_on_right else \"question\"],\n","        truncation=\"only_second\" if pad_on_right else \"only_first\",\n","        max_length=max_length,\n","        stride=doc_stride,\n","        return_overflowing_tokens=True,\n","        return_offsets_mapping=True,\n","        padding=\"max_length\",\n","    )\n","\n","    # Since one example might give us several features if it has a long context, we need a map from a feature to\n","    # its corresponding example. This key gives us just that.\n","    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n","\n","    # We keep the example_id that gave us this feature and we will store the offset mappings.\n","    tokenized_examples[\"example_id\"] = []\n","\n","    for i in range(len(tokenized_examples[\"input_ids\"])):\n","        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n","        sequence_ids = tokenized_examples.sequence_ids(i)\n","        context_index = 1 if pad_on_right else 0\n","\n","        # One example can give several spans, this is the index of the example containing this span of text.\n","        sample_index = sample_mapping[i]\n","        tokenized_examples[\"example_id\"].append(examples[\"id\"][sample_index])\n","\n","        # Set to None the offset_mapping that are not part of the context so it's easy to determine if a token\n","        # position is part of the context or not.\n","        tokenized_examples[\"offset_mapping\"][i] = [\n","            (o if sequence_ids[k] == context_index else None)\n","            for k, o in enumerate(tokenized_examples[\"offset_mapping\"][i])\n","        ]\n","\n","    return tokenized_examples"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TrsP53m6TRkO"},"source":["And like before, we can apply that function to our validation set easily:"]},{"cell_type":"code","metadata":{"id":"yUjuFrXkTRkP","outputId":"ab9597fd-5323-4fdb-fc3d-ee37e466c8d1"},"source":["validation_features = datasets[\"validation\"].map(\n","    prepare_validation_features,\n","    batched=True,\n","    remove_columns=datasets[\"validation\"].column_names\n",")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"32ba04d6240149f49eb48c8d8b7f9aae","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=11.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zyFLsnL3TRkP"},"source":["Now we can grab the predictions for all features by using the `Trainer.predict` method:"]},{"cell_type":"code","metadata":{"id":"u0rVSOdoTRkQ","outputId":"5930c032-d4a7-40cb-d220-cadd5226da7c"},"source":["raw_predictions = trainer.predict(validation_features)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","    <div>\n","        <style>\n","            /* Turns off some styling */\n","            progress {\n","                /* gets rid of default border in Firefox and Opera. */\n","                border: none;\n","                /* Needs to be in here for Safari polyfill so background images work as expected. */\n","                background-size: auto;\n","            }\n","        </style>\n","      \n","      <progress value='674' max='674' style='width:300px; height:20px; vertical-align: middle;'></progress>\n","      [674/674 00:39]\n","    </div>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"zxtEyo3uTRkQ"},"source":["The `Trainer` *hides* the columns that are not used by the model (here `example_id` and `offset_mapping` which we will need for our post-processing), so we set them back:"]},{"cell_type":"code","metadata":{"id":"DEUQZg7xTRkQ"},"source":["validation_features.set_format(type=validation_features.format[\"type\"], columns=list(validation_features.features.keys()))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HQVGx0dtTRkQ"},"source":["We can now refine the test we had before: since we set `None` in the offset mappings when it corresponds to a part of the question, it's easy to check if an answer is fully inside the context. We also eliminate very long answers from our considerations (with an hyper-parameter we can tune)"]},{"cell_type":"code","metadata":{"id":"zVK2M1hUTRkR"},"source":["max_answer_length = 30"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ivn1JgSiTRkR","outputId":"3f10926b-cd03-4e9d-8a70-d5d1f6946a18"},"source":["start_logits = output.start_logits[0].cpu().numpy()\n","end_logits = output.end_logits[0].cpu().numpy()\n","offset_mapping = validation_features[0][\"offset_mapping\"]\n","# The first feature comes from the first example. For the more general case, we will need to be match the example_id to\n","# an example index\n","context = datasets[\"validation\"][0][\"context\"]\n","\n","# Gather the indices the best start/end logits:\n","start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n","end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n","valid_answers = []\n","for start_index in start_indexes:\n","    for end_index in end_indexes:\n","        # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n","        # to part of the input_ids that are not in the context.\n","        if (\n","            start_index >= len(offset_mapping)\n","            or end_index >= len(offset_mapping)\n","            or offset_mapping[start_index] is None\n","            or offset_mapping[end_index] is None\n","        ):\n","            continue\n","        # Don't consider answers with a length that is either < 0 or > max_answer_length.\n","        if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n","            continue\n","        if start_index <= end_index: # We need to refine that test to check the answer is inside the context\n","            start_char = offset_mapping[start_index][0]\n","            end_char = offset_mapping[end_index][1]\n","            valid_answers.append(\n","                {\n","                    \"score\": start_logits[start_index] + end_logits[end_index],\n","                    \"text\": context[start_char: end_char]\n","                }\n","            )\n","\n","valid_answers = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[:n_best_size]\n","valid_answers"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'score': 16.706663, 'text': 'Denver Broncos'},\n"," {'score': 14.635585,\n","  'text': 'Denver Broncos defeated the National Football Conference (NFC) champion Carolina Panthers'},\n"," {'score': 13.234194, 'text': 'Carolina Panthers'},\n"," {'score': 12.468662, 'text': 'Broncos'},\n"," {'score': 11.709289, 'text': 'Denver'},\n"," {'score': 10.397583,\n","  'text': 'Broncos defeated the National Football Conference (NFC) champion Carolina Panthers'},\n"," {'score': 10.104669,\n","  'text': 'American Football Conference (AFC) champion Denver Broncos'},\n"," {'score': 9.721636,\n","  'text': 'The American Football Conference (AFC) champion Denver Broncos'},\n"," {'score': 9.007437,\n","  'text': 'Denver Broncos defeated the National Football Conference (NFC) champion Carolina Panthers 24–10'},\n"," {'score': 8.834958,\n","  'text': 'Denver Broncos defeated the National Football Conference (NFC) champion Carolina'},\n"," {'score': 8.38701,\n","  'text': 'Denver Broncos defeated the National Football Conference (NFC)'},\n"," {'score': 8.143825,\n","  'text': 'Denver Broncos defeated the National Football Conference (NFC) champion Carolina Panthers 24–10 to earn their third Super Bowl title.'},\n"," {'score': 8.03359,\n","  'text': 'American Football Conference (AFC) champion Denver Broncos defeated the National Football Conference (NFC) champion Carolina Panthers'},\n"," {'score': 7.832466,\n","  'text': 'Denver Broncos defeated the National Football Conference (NFC'},\n"," {'score': 7.650557,\n","  'text': 'The American Football Conference (AFC) champion Denver Broncos defeated the National Football Conference (NFC) champion Carolina Panthers'},\n"," {'score': 7.6060467, 'text': 'Carolina Panthers 24–10'},\n"," {'score': 7.5795317,\n","  'text': 'Denver Broncos defeated the National Football Conference'},\n"," {'score': 7.433568, 'text': 'Carolina'},\n"," {'score': 6.742434,\n","  'text': 'Carolina Panthers 24–10 to earn their third Super Bowl title.'},\n"," {'score': 6.71136,\n","  'text': 'Denver Broncos defeated the National Football Conference (NFC) champion Carolina Panthers 24'}]"]},"metadata":{"tags":[]},"execution_count":0}]},{"cell_type":"markdown","metadata":{"id":"Wpjwc7eBTRkR"},"source":["We can compare to the actual ground-truth answer:"]},{"cell_type":"code","metadata":{"id":"WNLipKuuTRkS","outputId":"b98df8dd-a75f-46bc-81e1-e64cc75e7efb"},"source":["datasets[\"validation\"][0][\"answers\"]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'answer_start': [177, 177, 177],\n"," 'text': ['Denver Broncos', 'Denver Broncos', 'Denver Broncos']}"]},"metadata":{"tags":[]},"execution_count":0}]},{"cell_type":"markdown","metadata":{"id":"-KOPZvwFTRkS"},"source":["Our model picked the right as the most likely answer!\n","\n","As we mentioned in the code above, this was easy on the first feature because we knew it comes from the first example. For the other features, we will need a map between examples and their corresponding features. Also, since one example can give several features, we will need to gather together all the answers in all the features generated by a given example, then pick the best one. The following code builds a map from example index to its corresponding features indices:"]},{"cell_type":"code","metadata":{"id":"sB9njRPDTRkT"},"source":["import collections\n","\n","examples = datasets[\"validation\"]\n","features = validation_features\n","\n","example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n","features_per_example = collections.defaultdict(list)\n","for i, feature in enumerate(features):\n","    features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CpFguto0TRkU"},"source":["We're almost ready for our post-processing function. The last bit to deal with is the impossible answer (when `squad_v2 = True`). The code above only keeps answers that are inside the context, we need to also grab the score for the impossible answer (which has start and end indices corresponding to the index of the CLS token). When one example gives several features, we have to predict the impossible answer when all the features give a high score to the impossible answer (since one feature could predict the impossible answer just because the answer isn't in the part of the context it has access too), which is why the score of the impossible answer for one example is the *minimum* of the scores for the impossible answer in each feature generated by the example.\n","\n","We then predict the impossible answer when that score is greater than the score of the best non-impossible answer. All combined together, this gives us this post-processing function:"]},{"cell_type":"code","metadata":{"id":"c6brjP2LTRkU"},"source":["from tqdm.auto import tqdm\n","\n","def postprocess_qa_predictions(examples, features, raw_predictions, n_best_size = 20, max_answer_length = 30):\n","    all_start_logits, all_end_logits = raw_predictions\n","    # Build a map example to its corresponding features.\n","    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n","    features_per_example = collections.defaultdict(list)\n","    for i, feature in enumerate(features):\n","        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n","\n","    # The dictionaries we have to fill.\n","    predictions = collections.OrderedDict()\n","\n","    # Logging.\n","    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n","\n","    # Let's loop over all the examples!\n","    for example_index, example in enumerate(tqdm(examples)):\n","        # Those are the indices of the features associated to the current example.\n","        feature_indices = features_per_example[example_index]\n","\n","        min_null_score = None # Only used if squad_v2 is True.\n","        valid_answers = []\n","        \n","        context = example[\"context\"]\n","        # Looping through all the features associated to the current example.\n","        for feature_index in feature_indices:\n","            # We grab the predictions of the model for this feature.\n","            start_logits = all_start_logits[feature_index]\n","            end_logits = all_end_logits[feature_index]\n","            # This is what will allow us to map some the positions in our logits to span of texts in the original\n","            # context.\n","            offset_mapping = features[feature_index][\"offset_mapping\"]\n","\n","            # Update minimum null prediction.\n","            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n","            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n","            if min_null_score is None or min_null_score < feature_null_score:\n","                min_null_score = feature_null_score\n","\n","            # Go through all possibilities for the `n_best_size` greater start and end logits.\n","            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n","            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n","            for start_index in start_indexes:\n","                for end_index in end_indexes:\n","                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n","                    # to part of the input_ids that are not in the context.\n","                    if (\n","                        start_index >= len(offset_mapping)\n","                        or end_index >= len(offset_mapping)\n","                        or offset_mapping[start_index] is None\n","                        or offset_mapping[end_index] is None\n","                    ):\n","                        continue\n","                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n","                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n","                        continue\n","\n","                    start_char = offset_mapping[start_index][0]\n","                    end_char = offset_mapping[end_index][1]\n","                    valid_answers.append(\n","                        {\n","                            \"score\": start_logits[start_index] + end_logits[end_index],\n","                            \"text\": context[start_char: end_char]\n","                        }\n","                    )\n","        \n","        if len(valid_answers) > 0:\n","            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n","        else:\n","            # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid\n","            # failure.\n","            best_answer = {\"text\": \"\", \"score\": 0.0}\n","        \n","        # Let's pick our final answer: the best one or the null answer (only for squad_v2)\n","        if not squad_v2:\n","            predictions[example[\"id\"]] = best_answer[\"text\"]\n","        else:\n","            answer = best_answer[\"text\"] if best_answer[\"score\"] > min_null_score else \"\"\n","            predictions[example[\"id\"]] = answer\n","\n","    return predictions"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7-QwV-47TRkW"},"source":["And we can apply our post-processing function to our raw predictions:"]},{"cell_type":"code","metadata":{"id":"K5XLsOsQTRkX","outputId":"5b3e6f3d-d599-4f1f-ff41-a6093c6f1d66"},"source":["final_predictions = postprocess_qa_predictions(datasets[\"validation\"], validation_features, raw_predictions.predictions)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Post-processing 10570 example predictions split into 10784 features.\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"347ebed36d3541388e4e821372e91aa4","version_major":2,"version_minor":0},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=10570.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jRfiMq7cTRkX"},"source":["Then we can load the metric from the datasets library."]},{"cell_type":"code","metadata":{"id":"OIopSs0FTRkY"},"source":["metric = load_metric(\"squad_v2\" if squad_v2 else \"squad\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GztE2DT5TRka"},"source":["Then we can call compute on it. We just need to format predictions and labels a bit as it expects a list of dictionaries and not one big dictionary. In the case of squad_v2, we also have to set a `no_answer_probability` argument (which we set to 0.0 here as we have already set the answer to empty if we picked it)."]},{"cell_type":"code","metadata":{"id":"hYK7FR6gTRka","outputId":"0298cab7-4759-474a-89a1-15acbfcee334"},"source":["if squad_v2:\n","    formatted_predictions = [{\"id\": k, \"prediction_text\": v, \"no_answer_probability\": 0.0} for k, v in final_predictions.items()]\n","else:\n","    formatted_predictions = [{\"id\": k, \"prediction_text\": v} for k, v in final_predictions.items()]\n","references = [{\"id\": ex[\"id\"], \"answers\": ex[\"answers\"]} for ex in datasets[\"validation\"]]\n","metric.compute(predictions=formatted_predictions, references=references)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'exact_match': 76.74550614947965, 'f1': 85.13412652023338}"]},"metadata":{"tags":[]},"execution_count":0}]},{"cell_type":"markdown","metadata":{"id":"eAQk2sJSTRkb"},"source":["You can now upload the result of the training to the Hub, just execute this instruction:"]},{"cell_type":"code","metadata":{"id":"AkKJwCiXTRkc"},"source":["trainer.push_to_hub()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s3vAVL2kTRkd"},"source":["You can now share this model with all your friends, family, favorite pets: they can all load it with the identifier `\"your-username/the-name-you-picked\"` so for instance:\n","\n","```python\n","from transformers import AutoModelForQuestionAnswering\n","\n","model = AutoModelForQuestionAnswering.from_pretrained(\"sgugger/my-awesome-model\")\n","```"]},{"cell_type":"code","metadata":{"id":"Fn7X_v0HTRkd"},"source":[""],"execution_count":null,"outputs":[]}]}